Технічне завдання для веб-застосунку пошуку роботи ІТ-спеціалістів
1. Опис проєкту
1.1. Мета
Розробити веб-застосунок для пошуку роботи та працівників в ІТ-сфері, орієнтований на український ринок із планами міжнародного розширення. Застосунок має бути у форматі SLC (Simple, Lovable, Complete), забезпечуючи інтуїтивний інтерфейс, ключові функції для HR і шукачів роботи, а також відповідність стандартам безпеки (GDPR). Основна мета — конкурувати з платформами, такими як DOU та Djinni.co, пропонуючи простий, приємний і завершений продукт.
1.2. Цільова аудиторія
* Шукачі роботи: ІТ-спеціалісти (розробники, дизайнери, DevOps тощо), які шукають вакансії, включаючи віддалену роботу.
* HR: Рекрутери та представники ІТ-компаній, які створюють вакансії та шукають кандидатів.
* Адміністратори: Модератори платформи для перевірки контенту (вакансій, резюме, компаній).
1.3. Основні функції
* Реєстрація та управління профілями користувачів (HR, шукачі роботи, адміністратори).
* Створення та управління профілями компаній.
* Створення, пошук і управління вакансіями.
* Створення, пошук і управління резюме.
* Категорії та теги (скіли) для класифікації вакансій і резюме.
* Пошук вакансій і кандидатів із фільтрами та сортуванням.
* Вбудований чат і сповіщення.
* Монетизація через плату за розміщення вакансій та/або підписки.
1.4. Технологічний стек
* Фронтенд: Nuxt (Vue.js), Nuxt UI для компонентів і стилів.
* Бекенд: Express для API, Prisma для роботи з базою даних.
* База даних: Supabase (PostgreSQL) для зберігання даних і автентифікації.
* Інфраструктура: Supabase для хостингу бази даних і зберігання файлів (PDF, зображення).
* Інші інструменти: Stripe (або аналог) для платежів (уточнити пізніше).
2. Функціональні вимоги
2.1. Користувачі та ролі
* Реєстрація:
   * Користувачі реєструються через email/пароль або сторонні сервіси (Google, LinkedIn).
   * Користувач може бути лише однією роллю: HR, шукач роботи або адміністратор.
* HR:
   * Створює та редагує профіль компанії.
   * Створює, редагує, видаляє вакансії.
   * Шукає кандидатів за резюме (теги, досвід, локація, ключові слова).
   * Переглядає резюме та подачі кандидатів.
   * Спілкується з кандидатами через чат.
   * Отримує сповіщення про нові заявки.
* Шукач роботи:
   * Створює, редагує, видаляє резюме (може мати кілька резюме).
   * Шукає вакансії за фільтрами та сортуванням.
   * Подає заявки на вакансії.
   * Спілкується з HR через чат.
   * Отримує сповіщення про нові вакансії та повідомлення.
* Адміністратор:
   * Модерує вакансії, резюме, компанії.
   * Керує користувачами (блокування, видалення).
   * Переглядає статистику платформи (кількість вакансій, користувачів).
2.2. Створення компаній
* Дані компанії:
   * Назва (обов’язкове).
   * Логотип (зображення, завантаження через Supabase Storage).
   * Опис (текст до 1000 символів).
   * Вебсайт (URL).
   * Галузь (вибір із визначеного списку, наприклад, “Програмне забезпечення”, “Фінтех”).
   * Розмір компанії (наприклад, 1-10, 11-50, 51-200).
   * Локація (країна, місто, опціонально).
* Обмеження:
   * Один HR представляє лише одну компанію.
   * Верифікація компаній (email-домен) планується в наступній версії.
2.3. Створення вакансій
* Дані вакансії:
   * Назва (обов’язкове, до 100 символів).
   * Опис (текст до 5000 символів).
   * Зарплата (опціонально, діапазон у UAH або USD).
   * Тип зайнятості (повна, часткова, віддалена, гібридна).
   * Локація (країна, місто, опціонально для віддаленої роботи).
   * Категорія (вибір із визначеного списку).
   * Теги (скіли, вибір із глобального списку або створення власних).
   * Статус (активна, закрита, на модерації).
* Функціональність:
   * HR створює вакансії через форму з шаблоном (обговорити деталі шаблону окремо).
   * Вакансії проходять модерацію перед публікацією.
   * Пошук вакансій шукачами через:
      * Пошуковий рядок (ключові слова).
      * Фільтри: категорія, теги, зарплата, тип зайнятості, локація.
      * Сортування: за датою створення, зарплатою (якщо вказана).
2.4. Створення резюме
* Дані резюме:
   * Ім’я (обов’язкове).
   * Контакти (email, телефон, опціонально LinkedIn, GitHub).
   * Досвід роботи (посада, компанія, період, опис).
   * Освіта (заклад, спеціальність, період).
   * Навички (теги, вибір із глобального списку або створення власних).
   * Портфоліо (URL або завантаження файлів, наприклад, PDF).
   * Бажана зарплата (опціонально, у UAH або USD).
* Функціональність:
   * Шукач може створювати кілька резюме через форму з шаблоном (обговорити деталі шаблону окремо).
   * Завантаження файлів (PDF резюме, портфоліо) через Supabase Storage.
   * Пошук резюме HR через:
      * Фільтри: теги, досвід, локація, ключові слова.
      * Сортування: за датою створення, досвідом.
2.5. Категорії та теги
* Категорії:
   * Заздалегідь визначений список (наприклад, Frontend, Backend, DevOps, UI/UX, Data Science).
   * Керуються адміністратором через адмін-панель.
* Теги (скіли):
   * Глобальний список (наприклад, JavaScript, Python, AWS).
   * Користувачі (HR, шукачі) можуть створювати власні теги.
   * Автодоповнення тегів планується в наступній версії.
2.6. Пошук
* Пошук вакансій (шукачі):
   * Пошуковий рядок (пошук за назвою, описом, компанією).
   * Фільтри: категорія, теги, зарплата, тип зайнятості, локація.
   * Сортування: за датою, зарплатою.
* Пошук кандидатів (HR):
   * Пошуковий рядок (пошук за резюме, ім’ям, досвідом).
   * Фільтри: теги, досвід, локація, ключові слова.
   * Сортування: за датою створення резюме, досвідом.
2.7. Взаємодія
* Чат:
   * Вбудований чат між HR і шукачами.
   * Без шаблонів повідомлень у першій версії.
   * Зберігання історії чату в Supabase.
* Заявки:
   * Шукачі подають заявки на вакансії, додаючи резюме.
   * Статуси заявок (в обробці, прийнято, відхилено) — деталі обговорити окремо, у першій версії базові статуси.
* Сповіщення:
   * Email і в застосунку:
      * Нові заявки (HR).
      * Нові повідомлення в чаті (HR, шукачі).
      * Нові вакансії, що відповідають резюме (шукачі).
2.8. Монетизація
* Моделі:
   * Плата за розміщення вакансій (одноразова оплата за кожну вакансію).
   * Підписка для HR (доступ до розширених функцій, наприклад, пріоритетне розміщення вакансій).
* Платіжна система:
   * Інтеграція з платіжною системою (наприклад, Stripe, деталі уточнити).
   * Оплата через захищений API.
3. Нефункціональні вимоги
3.1. Інтерфейс і користувацький досвід (SLC)
* Інтуїтивний дизайн: Використання Nuxt UI для чистих, сучасних компонентів.
* Анімації: Плавні переходи між сторінками, завантаження контенту.
* Темна/світла тема: Перемикання тем у налаштуваннях користувача.
* Адаптивність: Повна підтримка десктопів, планшетів, мобільних пристроїв.
* Мова: Українська (англійська планується в наступній версії).
3.2. Безпека
* Автентифікація: Supabase Auth для email/пароль і сторонніх сервісів (Google, LinkedIn).
* Шифрування: HTTPS, шифрування даних у Supabase.
* GDPR: Згода користувачів на обробку даних, можливість видалення профілю.
* Захист файлів: Обмеження доступу до завантажених файлів (резюме, портфоліо).
3.3. Масштабованість
* Очікується невизначена кількість користувачів у перший рік, тому Supabase і Express мають бути налаштовані для горизонтального масштабування.
* Кешування пошукових запитів (наприклад, Redis) для швидкості.
3.4. Продуктивність
* Час завантаження сторінок: < 2 секунди при нормальному з’єднанні.
* API відповідь: < 500 мс для 95% запитів.
4. Архітектура
4.1. Загальна структура
* Фронтенд:
   * Nuxt (SSR для SEO, SPA для швидкості).
   * Nuxt UI для компонентів (кнопки, форми, таблиці).
   * Інтеграція з Supabase SDK для автентифікації та запитів.
* Бекенд:
   * Express для REST API.
   * Prisma для роботи з Supabase (PostgreSQL).
   * Маршрути: /auth, /users, /companies, /vacancies, /resumes, /search, /chat.
* База даних (Supabase):
   * Таблиці:
      * users (id, email, role, created_at).
      * companies (id, name, logo_url, description, website, industry, size, location).
      * vacancies (id, company_id, title, description, salary, employment_type, location, category, tags, status).
      * resumes (id, user_id, name, contacts, experience, education, skills, portfolio, desired_salary).
      * applications (id, vacancy_id, resume_id, status).
      * messages (id, sender_id, receiver_id, content, timestamp).
      * categories (id, name).
      * tags (id, name).
* Зберігання файлів:
   * Supabase Storage для логотипів компаній, PDF резюме, портфоліо.
* Платежі:
   * Інтеграція з платіжною системою через API (наприклад, Stripe).
4.2. Схема API (приклади)
* POST /auth/register — Реєстрація користувача.
* POST /companies — Створення компанії.
* POST /vacancies — Створення вакансії.
* GET /vacancies?category=frontend&tags=javascript — Пошук вакансій.
* POST /resumes — Створення резюме.
* GET /resumes?skills=python&experience=3 — Пошук резюме.
* POST /applications — Подача заявки.
* POST /messages — Відправка повідомлення.
5. План реалізації
5.1. Етапи розробки
1. Планування (2 тижні):
   * Деталізація шаблонів резюме/вакансій, статусів заявок.
   * Вибір платіжної системи.
2. Дизайн (3 тижні):
   * Прототипи в Figma для всіх сторінок (реєстрація, профіль, вакансії, резюме, пошук, чат).
   * Адаптивний дизайн із темною/світлою темою.
3. Розробка бекенду (6 тижнів):
   * Налаштування Express, Prisma, Supabase.
   * Реалізація API для всіх функцій.
   * Інтеграція платіжної системи.
4. Розробка фронтенду (6 тижнів):
   * Налаштування Nuxt, Nuxt UI.
   * Реалізація сторінок і компонентів.
   * Інтеграція з бекендом.
5. Тестування (3 тижні):
   * Юніт-тести для API.
   * Інтеграційні тести для фронтенду/бекенду.
   * Тестування безпеки (GDPR, автентифікація).
6. Розгортання (1 тиждень):
   * Деплой фронтенду на Vercel.
   * Деплой бекенду на Heroku або аналог.
   * Налаштування Supabase.
5.2. Орієнтовний термін
* Загальний термін: ~21 тиждень (~5 місяців) для SLC.
6. Обмеження та припущення
* Обмеження:
   * Автодоповнення тегів, верифікація компаній, підтримка кількох мов, інтеграція з Google Calendar відкладені до наступної версії.
   * Гейміфікація та аналітичні дашборди не включені в першу версію.
   * Специфікація платіжної системи уточнюється пізніше.
* Припущення:
   * Базові статуси заявок: “В обробці”, “Прийнято”, “Відхилено”.
   * Шаблони резюме/вакансій включають стандартні поля з можливістю редагування.
   * Український ринок є пріоритетним, валюта зарплат — UAH/USD.
7. Рекомендації
* Обговорення деталей:
   * Статуси заявок: Визначити повний список і логіку переходів.
   * Шаблони резюме/вакансій: Узгодити структуру та приклади.
   * Платіжна система: Вибрати Stripe чи альтернативу.
* Тестування з користувачами:
   * Провести бета-тестування з ІТ-спеціалістами та HR для оцінки UX.
* Майбутні покращення:
   * Додати ШІ-рекомендації вакансій/кандидатів.
   * Впровадити форум для спільноти.
   * Розширити підтримку мов (англійська).
8. Висновок
Цей веб-застосунок забезпечить простий, приємний і завершений досвід для пошуку роботи та працівників в ІТ-сфері. Використання Nuxt, Nuxt UI, Supabase, Express і Prisma гарантує сучасну архітектуру та швидку розробку. Функціонал, як-от створення компаній, вакансій, резюме, пошук і чат, відповідає потребам українського ринку, враховуючи попит на віддалену роботу та валюту зарплат. Подальше уточнення деталей (шаблони, статуси, платежі) допоможе завершити SLC-продукт у визначені терміни.